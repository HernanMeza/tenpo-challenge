package com.tenpo.transaction.swagger.config;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class SwaggerDocumentationConfig {

    @Bean
    public OpenAPI openApi() {
        return new OpenAPI()
                .info(new Info()
                        .title("Tenpo Challenge FullStack")
                        .description(" ## ¬°Hola Equipo Tenpo, bienvenidos a la *Transaction API*! üöÄ  \n\n" +
                                "Una **API propuesta a modo de challenge** para la **gesti√≥n de transacciones de los verdaderos Tenpistas**.   \n\n" +
                                "Esta API est√° dise√±ada para permitir la **creaci√≥n**, **obtenci√≥n**, **actualizaci√≥n** y **eliminaci√≥n** de transacciones de clientes de manera r√°pida. Ya sea que necesites: \n" +
                                "- Registrar una nueva **transacci√≥n**, \n" +
                                "- Consultar el historial de **transacciones**, \n" +
                                "- Actualizar detalles,  \n" +
                                "- O eliminar registros,  \n\n" +
                                "**¬øEso suena bien verdad?** ¬°Esta API te ofrece m√©todos necesarios para interactuar con los datos de manera sencilla! üî•  \n\n" +
                                "**¬°Qui√©n sabe! Quiz√°s esta API guste tanto que terminemos integr√°ndola en alg√∫n lado.** üòé  \n\n" +
                                "A todo esto; quiz√°s les gustar√≠a saber qu√© tecnolog√≠as se utilizaron para **crear** y **usar** esta API, aqu√≠ va un listado:  \n\n" +
                                "### **Tecnolog√≠as:**   \n" +
                                "- **Java 17** ‚öôÔ∏è   \n" +
                                "- **Spring Boot 3.4.1** üî•   \n" +
                                "- **PostgreSQL** üóÉÔ∏è  \n\n" +
                                "---  \n\n" +
                                "### **Dependencias:**  \n\n" +
                                "- **spring-boot-starter-web**:        Permite construir aplicaciones web RESTful, facilitando la creaci√≥n de endpoints para la API.  \n" +
                                "- **spring-boot-starter-data-jpa**: Para integrar con JPA y gestionar el acceso a datos de manera eficiente, simplificando las interacciones con la base de datos.  \n" +
                                "- **spring-boot-starter-validation**: Usado para la validaci√≥n autom√°tica de los datos de request en los endpoints.  \n" +
                                "- **postgresql**: Controlador JDBC para conectar la aplicaci√≥n a la base de datos PostgreSQL.  \n" +
                                "- **lombok**: Al d√≠a de hoy, ya un verdadero cl√°sico moderno. Para reducir el c√≥digo boilerplate, generando autom√°ticamente constructores, getters, setters y otros m√©todos comunes, entre nos... me encanta usar Builder y tambi√©n dejar el Autowired lo m√°s de lado posible, ¬°constructores all the way!.  \n" +
                                "- **spring-boot-starter-test**: Las herramientas para realizar pruebas unitarias y de integraci√≥n.  \n" +
                                "- **flyway-core**: Utilizado para el control de versiones de la base de datos, si bien su uso est√° m√°s pensado para migraciones, facilita much√≠simo la creaci√≥n de esquema, tablas y secuencias.  \n" +
                                "- **flyway-database-postgresql**: Extensi√≥n de PostgreSQL para Flyway.  \n" +
                                "- **rest-assured**: Herramienta para realizar pruebas autom√°ticas de integraci√≥n de APIs RESTful, asegurando que los endpoints funcionan correctamente bajo diversas condiciones.  \n" +
                                "- **bucket4j-core**: Implementaci√≥n de limitaci√≥n de tasa (rate-limiting) para controlar el n√∫mero de peticiones a los endpoints, asegurando que la API sea escalable y est√© protegida contra abusos.  \n" +
                                "- **swagger-core**: Se utiliza para habilitar la documentaci√≥n de la API, as√≠ facilitamos la creaci√≥n de especificaciones y la visualizaci√≥n de los endpoints y las estructuras de request y response; **por cierto, este html lo gener√≥ Swagger ¬°Insolito!** ü§©.  \n\n" +
                                "---  \n\n" +
                                "Este conjunto de tecnolog√≠as y dependencias ha sido seleccionado para garantizar una **API escalable** y **f√°cil de mantener**. üòÑ")

                        .termsOfService("")
                        .version("1.0.0")
                        .license(new License()
                                .name("")
                                .url("http://unlicense.org"))
                        .contact(new io.swagger.v3.oas.models.info.Contact()
                                .email("")));
    }

}
